<Window x:Class="WpfApp1.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:local="clr-namespace:WpfApp1"
		mc:Ignorable="d"
		Title="MainWindow"
		Height="440.957"
		Width="962.442"
		SizeToContent="WidthAndHeight"
		d:DataContext="{d:DesignInstance local:MainWindowViewModel, IsDesignTimeCreatable=True}">

	<Window.DataContext>
		<local:MainWindowViewModel />
	</Window.DataContext>

	<Grid ShowGridLines="True"
			UseLayoutRounding="True">
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" />
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<local:Grid Grid.Column="0"
				Grid.Row="0" />
		<local:DrawingGrid Grid.Column="1"
				Grid.Row="0"/>
		<Border Grid.Column="0"
				Grid.Row="1"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Margin="24"
				BorderThickness="1"
				BorderBrush="Black">
			<local:Grid />
		</Border>
		<Border Grid.Column="1"
				Grid.Row="1"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Margin="24"
				BorderThickness="1"
				BorderBrush="Black">
			<!--
				Comment out this element to run without a hang ...
				Points to note:
				In fact: as noted in DrawingGrid.cs: defining and using a DependencyProperty
				in code causes the bug. If you comment out that property it will run ...
				This is a UIElement (and not FrameworkElement); YET so is the "Grid" element.
				There are two instances of each here ... all within the same outer Wpf Grid.
				But this one is inside a Border ...
				Yet still another "Grid" Element is inside a Border and that one has no issue.
				If you also move this outside of this Border it will run.
			-->
			<local:DrawingGrid />
		</Border>
	</Grid>
</Window>
