@model Eleflex.Security.Web.Security.Roles.ListViewModel
@{
    ViewBag.Title = "System Roles";
}
<h1>System Roles</h1>
<fieldset>
    <legend class="sr-only sr-only-focusable">Search Roles</legend>
@using (Html.BeginForm("List", "Roles", FormMethod.Post, new { id = "AdminSecurityRolesListForm", @class = "form-inline" }))
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        @Html.LabelFor(x => x.Name, "Name:")        
        @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Description, "Description:")
        @Html.TextBoxFor(x => x.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Description)
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Inactive, "Status:")
        @Html.DropDownListFor(x => x.Inactive, Model.InactiveSelectItems, new { @class = "form-control eleflexselect", data_placeholder = "Select an Item...", Style = "width: 150px;" })
        @Html.ValidationMessageFor(x => x.Inactive)
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.MaxRecords, "Max Records:")
        @Html.TextBoxFor(x => x.MaxRecords, new { @class = "form-control", placeholder = "Default: " + Eleflex.Storage.StorageConstants.MAX_RETURNED_RECORDS_DEFAULT })
        @Html.ValidationMessageFor(x => x.MaxRecords)
    </div>
    <div class="form-group">
        <button class="btn btn-primary active" type="submit">Search</button>
        <button class="btn btn-default active" type="button" onclick="eleflexClearInput('#AdminSecurityRolesListForm');">Clear</button>
        <button class="btn btn-primary active" type="button" onclick="window.location.href('@Url.Action("Create","Roles")')">New Role</button>
    </div>
}
</fieldset>
<hr/>
<table class="eleflexdatatable">
    <thead>
        <tr>
            <th>Name</th>
            <th>System Role</th>
            <th>Status</th>
            <th>Description</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Items != null)
        {
            for (int i = 0; i < Model.Items.Count; i++)
            {
                <tr>
                    <td>@Model.Items[i].Name</td>
                    <td>@Model.Items[i].ModuleKey.HasValue</td>
                    <td>@if(Model.Items[i].Inactive){<text>Inactive</text>}else{<text>Active</text>}</td>
                    <td>@Model.Items[i].Description</td>
                    <td>                        
                        @if(Model.Items[i].StartDate.HasValue)
                        { @Model.Items[i].StartDate.Value.ToLocalTime().DateTime}
                    </td>
                    <td>
                        @if (Model.Items[i].EndDate.HasValue)
                        { @Model.Items[i].EndDate.Value.ToLocalTime().DateTime}
                    </td>
                    <td>
                         @Html.ActionLink("Edit", "Edit", new { roleKey = Model.Items[i].RoleKey }, new { @class = "btn btn-sm btn-primary", @type = "button" })
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
<script type="text/javascript">
    $(document).ready(function () {        

    });
</script>