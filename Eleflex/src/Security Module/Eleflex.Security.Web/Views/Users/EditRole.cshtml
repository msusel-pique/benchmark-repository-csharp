@model Eleflex.Security.Web.Security.Users.EditRoleViewModel
@{
    ViewBag.Title = "Edit Role Assignment";
}
<h1>Role Assignment</h1>
<div class="container">
    <fieldset>
        <legend class="sr-only sr-only-focusable">Role Form</legend>
        @using (Html.BeginForm("EditRole", "Users", FormMethod.Post, new { id = "AdminSecurityUsersEditRoleForm", @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.UserRoleKey)
            @Html.HiddenFor(x => x.RoleKey)
            @Html.HiddenFor(x => x.UserKey)
            @Html.ValidationSummary(false)
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <span>
                            <label >Selected Role: </label><span class="required">*</span> <span class="well well-sm"><span id="divselectedrole"></span></span>
                        </span>
                        <div><button type="button" class="btn btn-primary active" data-toggle="modal" data-target="#divnewrole" onclick="SearchRoles()">Select Role</button></div>
                        <div id="selectedroleerror" class="alert alert-danger hide" role="alert">
                            Please select a role.
                        </div>                        
                    </div>
                    <div id="CreateDateFromGroup" class="form-group date">
                        @Html.LabelFor(x => x.StartDateLocalTime, "Effective Date Begin:")
                        @Html.TextBoxFor(x => x.StartDateLocalTime, new { @class = "form-control eleflexdatetime" })
                        @Html.ValidationMessageFor(x => x.StartDateLocalTime)
                    </div>
                    <div id="CreateDateToGroup" class="form-group date">
                        @Html.LabelFor(x => x.EndDateLocalTime, "Effective Date End:")
                        @Html.TextBoxFor(x => x.EndDateLocalTime, new { @class = "form-control eleflexdatetime" })
                        @Html.ValidationMessageFor(x => x.EndDateLocalTime)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Inactive, "Status:")
                        @Html.DropDownListFor(x => x.Inactive, Model.InactiveSelectItems, new { @class = "form-control eleflexselectrequired", data_placeholder = "Select an Item...", Style = "width: 150px;" })
                        @Html.ValidationMessageFor(x => x.Inactive)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Comment, "Comment:")
                        @Html.TextAreaFor(x => x.Comment, new { @class = "form-control", rows = "3" })
                        @Html.ValidationMessageFor(x => x.Comment)
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary active" type="submit" onclick="return CanSubmit()">Save</button>
                        <button class="btn btn-default active" type="button" onclick="window.location.href('@Url.Action("Roles", "Users", new { userKey = Model.UserKey })')">Cancel</button>
                    </div>
                </div>
            </div>
        }
    </fieldset>

    <div class="modal fade" id="divnewrole" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:800px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Select a Role</h4>
                </div>
                <div id="newrolecontent" class="modal-body">

                    
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>
<script type="text/javascript">
    $(document).ready(function () {

        @if(!string.IsNullOrEmpty(Model.SuccessMessage))
        {
            <text>eleflexShowSuccessMessage("@(Model.SuccessMessage)");</text>
        }
        $("#divselectedrole").html('@(Model.SelectedRole)');
        
    });

    function CanSubmit()
    {
        if ($("#RoleKey").val()) {
            $("#selectedroleerror").addClass("hide");
            return true;
        }
        else
        {
            $("#selectedroleerror").removeClass("hide");
            return false;
        }
    }

    function SelectRole(roleKey, name) {
        $("#RoleKey").val(roleKey);
        $("#divselectedrole").html(name);
        if (!$("#selectedroleerror").hasClass("hide")) {
            $("#selectedroleerror").addClass("hide");
        }
    }

</script>

<script type="text/javascript">

    function SearchRoles() {
        var url = '@Url.Action("EditRoleSearch", "Users")';

        $.ajax({
            url: url,
            data: {
                roleName: $("#SearchName").val(),
                __RequestVerificationToken: eleflexGetRequestVerificationToken(),
            },
            type: "POST",
            dataType: "html",
            success: function (result) {
                $("#newrolecontent").html(result);
            }
        });
    }


</script>